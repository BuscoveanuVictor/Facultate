import LA_GrafuriPonderate as LA

def kruskal(file):
    # Lista are ca si key costul muchiei, iar valoarea este o lista de muchii cu acel cost
    lista_adiacenta, firstLine = LA.ListaAdiacenta(file,1,1)
    noduri = firstLine[0]
    muchii = firstLine[1]
    
    # Sortam lista dupa costul muchiilor
    lista_adiacenta_sortata = dict(sorted(lista_adiacenta.items()))

    # Marcam reprezentantii fiecarui nod (fiecare nod este reprezentat de el insusi)
    culoare_reprezentant = [0] * (noduri + 1)
    for i in range(1,noduri+1):
        culoare_reprezentant[i] = i;


    muchii_vizitate = 0 # Contorul de muchii vizitate pentru a verifica daca am ajuns la numarul de muchii necesar
    cost_minim = 0 # Costul minim al arborelui
    graf_minim = [] # Lista de muchii din arborele minim

    # Parcurgem lista sortata dupa costul muchiilor
    for cost in lista_adiacenta_sortata.keys():
        # Parcurgem lista de muchii cu acel cost
        for muchie in lista_adiacenta_sortata[cost]:
            nod1 = muchie[0]
            nod2 = muchie[1]
            # Daca nodurile nu au acelasi reprezentant, adaugam muchia in arborele minim
            if(culoare_reprezentant[nod1] != culoare_reprezentant[nod2]): 
                # Adaugam costul muchiei la costul minim
                cost_minim += cost
                # Incrementam contorul de muchii vizitate
                muchii_vizitate +=1 
                # Adaugam muchia in arborele minim
                graf_minim.append(muchie)
                # Actualizam reprezentantul nodului 1 cu reprezentantul nodului 2
                culoare_reprezentant[nod1] = culoare_reprezentant[nod2]
                # Daca am ajuns la numarul de muchii necesar am gasit arborele minim si iesim din for
                if muchii_vizitate == noduri-1:
                    break

    print(graf_minim)
    print(cost_minim)
    
kruskal("DateIntrare/graf_ponderat.in.in")


def Prim(file, start=1):
    print(file)
    lista_adiacenta, firstLine = LA.ListaAdiacenta(file)
    noduri = firstLine[0]
    muchii = firstLine[1]

    graf_minim = []
    vizitat = [False] * (noduri + 1)

    # Lista de valori pentru fiecare nod care retine costul minim de la nodul 
    # curent la nodul curent la cel mai apropiat nod nevizitat
    valori_noduri_descoperite = [float('inf')] * (noduri + 1)


    # Notatie pentru:
    # Nodul vecin
    vecin = 0
    # Costul muchiei
    pondere = 1

    # Descoperim nodul de start
    valori_noduri_descoperite[start] = 0
    parinte = [-1] * (noduri + 1)
    cost_minim = 0

    # Descoperim noduri pana cand am ajuns la numarul de muchii necesar pentru arborele minim
    for i in range(noduri):

        min_valoare = float('inf')
        
        # Alegem nodul decoperit cu valoarea minima dintre cele nevizitate(pentru a nu se crea un ciclu) 
        for j in range(1,noduri+1):
            if (valori_noduri_descoperite[j] < min_valoare and vizitat[j] == False):
                min_valoare = valori_noduri_descoperite[j]
                nod_curent = j

        # Marchez nodul curent ca fiind vizitat
        vizitat[nod_curent] = True
        # Si in adaug in graf
        graf_minim.append((parinte[nod_curent],nod_curent))
        cost_minim += min_valoare
    
        # Pasul de decoperire a nodurilor vecine
        for muchie in lista_adiacenta[nod_curent]:
            # Descopar pentru fiecar nod vecin nevizitat ponderea minima
            if (vizitat[muchie[vecin]] == False and muchie[pondere] < valori_noduri_descoperite[muchie[vecin]]):
                # Actualizam costul minim de la nodul curent la nodul vecin
                valori_noduri_descoperite[muchie[vecin]] = muchie[pondere]
                # Actualizam parintele nodului vecin
                parinte[muchie[vecin]] = nod_curent

    print(cost_minim)
    for muchie in graf_minim[1:]:
        print(muchie)

Prim("DateIntrare/graf_ponderat.in",3)
